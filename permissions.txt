# sudo chmod -Rf 777 /path/to/baseproject/backend/www/assets
# sudo chmod -Rf 777 /path/to/baseproject/backend/runtime
# sudo chmod -Rf 777 /path/to/baseproject/backend/components/
# sudo chmod -Rf 777 /path/to/baseproject/backend/models/
# sudo chmod -Rf 777 /path/to/baseproject/backend/www/images/lang_flags/

/path/to/baseproject/backend/www/assets
/path/to/baseproject/backend/runtime

/path/to/baseproject/frontend/www/assets
/path/to/baseproject/frontend/runtime


<?php

/*
nets-woocommerce-payment-gateway.php
  Plugin Name: Nets WooCommerce Payment Gateway
  Plugin URI: http://www.hb.com
  Description: Nets Woocommerce Payment Gateway allows you to accept payment on your Woocommerce store via Visa Cards, Mastercards.
  Version: 1.0
  Author: Venu Gopal Mopidevi
  Author URI: http://www.hb.me/
 */

if (!defined('ABSPATH'))
  exit;

add_action('plugins_loaded', 'woocommerce_nets_init', 0);

function woocommerce_nets_init() {

  if (!class_exists('WC_Payment_Gateway'))
    return;

  /**
   * Gateway class
   */
  class WC_Nets_Gateway extends WC_Payment_Gateway {

    public function __construct() {
      global $woocommerce;

      $this->id = 'nets_gateway';
      $this->icon = apply_filters('woocommerce_nets_icon', plugins_url('assets/pay-via-voguepay.png', __FILE__));
      $this->has_fields = false;
      $this->liveurl = 'https://voguepay.com/?p=linkToken';
      $this->method_title = 'Nets Payment Gateway';
      $this->method_description = 'Nets Payment Gateway allows you to receive Mastercard, Verve Card and Visa Card Payments On your Woocommerce Powered Site.';


      // Load the form fields.
      $this->init_form_fields();

      // Load the settings.
      $this->init_settings();


      // Define user set variables
      $this->title = $this->get_option('title');
      $this->description = $this->get_option('description');
      $this->netsMerchantId = $this->get_option('netsMerchantId');

      //Actions
      add_action('woocommerce_receipt_nets_gateway', array($this, 'receipt_page'));
      add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));

      // Payment listener/API hook
      add_action('woocommerce_api_wc_nets_gateway', array($this, 'check_nets_response'));
    }

    /**
     * Admin Panel Options
     * */
    public function admin_options() {
      echo '<h3>Nets Payment Gateway</h3>';
      echo '<p>Nets Payment Gateway allows you to accept payment through various channels such as Interswitch, Mastercard, Verve cards, eTranzact and Visa cards.</p>';
      echo '<table class="form-table">';
      $this->generate_settings_html();
      echo '</table>';
    }

    /**
     * Initialise Gateway Settings Form Fields
     * */
    function init_form_fields() {

      $this->form_fields = array(
        'enabled' => array(
          'title' => 'Enable/Disable',
          'type' => 'checkbox',
          'label' => 'Enable Nets Payment Gateway',
          'description' => 'Enable or disable the gateway.',
          'desc_tip' => true,
          'default' => 'yes'
        ),
        'title' => array(
          'title' => 'Title',
          'type' => 'text',
          'description' => 'This controls the title which the user sees during checkout.',
          'desc_tip' => false,
          'default' => 'Nets Payment Gateway'
        ),
        'description' => array(
          'title' => 'Description',
          'type' => 'textarea',
          'description' => 'This controls the description which the user sees during checkout.',
          'default' => 'Pay Via Voguepay: Accepts Interswitch, Mastercard, Verve cards, eTranzact and Visa cards.'
        ),
        'netsMerchantId' => array(
          'title' => 'Nets Merchant ID',
          'type' => 'text',
          'description' => 'Enter Your Nets Merchant ID, this can be gotten on your account page when you login on Nets',
          'default' => '',
          'desc_tip' => true
        )
      );
    }

    /**
     * Get Voguepay Args for passing to Voguepay
     * */
    function get_nets_args($order) {
      global $woocommerce;

      $order_id = $order->id;

      $order_total = $order->get_total();
      $merchantID = $this->netsMerchantId;
      $memo = "Payment for Order ID: $order_id";
      $notify_url = str_replace('https:', 'http:', add_query_arg('wc-api', 'WC_Nets_Gateway', home_url('/')));

      // voguepay Args
      $nets_args = array(
        'v_merchant_id' => $merchantID,
        'memo' => $memo,
        'total' => $order_total,
        'merchant_ref' => $order_id,
        'notify_url' => $notify_url,
        'success_url' => $notify_url,
        'fail_url' => $notify_url
      );

      $nets_args = apply_filters('woocommerce_nets_args', $nets_args);
      return $nets_args;
    }

    /**
     * Generate the Nets Payment button link
     * */
    function generate_nets_form($order_id) {
      global $woocommerce;

      $order = new WC_Order($order_id);

      $nets_adr = $this->liveurl . '?';

      $nets_args = $this->get_nets_args($order);

      $nets_args_array = array();

      foreach ($nets_args as $key => $value) {
        $nets_args_array[] = '<input type="hidden" name="' . esc_attr($key) . '" value="' . esc_attr($value) . '" />';
      }

      return '<form action="' . esc_url($nets_adr) . '" method="post" id="nets_payment_form" target="_top">
					' . implode('', $nets_args_array) . '
					<input type="submit" class="button-alt" id="submit_nets_payment_form" value="' . __('Make Payment', 'woocommerce') . '" /> <a class="button cancel" href="' . esc_url($order->get_cancel_order_url()) . '">' . __('Cancel order &amp; restore cart', 'woocommerce') . '</a>
				</form>';
    }

    /**
     * Process the payment and return the result
     * */
    function process_payment($order_id) {

      $order = new WC_Order($order_id);
      return array(
        'result' => 'success',
        'redirect' => add_query_arg('order', $order->id, add_query_arg('key', $order->order_key, $order->get_checkout_payment_url(true)))
      );
    }

    /**
     * Output for the order received page.
     * */
    function receipt_page($order) {
      echo '<p>' . __('Thank you for your order, please click the button below to make payment.', 'woocommerce') . '</p>';
      echo $this->generate_nets_form($order);
    }

    /**
     * Verify a successful Payment!
     * */
    function check_nets_response($posted) {
      global $woocommerce;

      if (isset($_POST['transaction_id'])) {
        $transaction_id = $_POST['transaction_id'];
        $json = wp_remote_get('https://voguepay.com/?v_transaction_id=' . $transaction_id . '&type=json');
        $transaction = json_decode($json['body'], true);

        if ($transaction['status'] == 'Approved') {
          $transaction_id = $transaction['transaction_id'];
          $order_id = $transaction['merchant_ref'];
          $order_id = (int) $order_id;

          $order = new WC_Order($order_id);
          $order_total = $order->get_total();

          $amount_paid = $transaction['total'];

          // check if the amount paid is equal to the order amount.
          if ($order_total != $amount_paid) {
            //after payment hook
            do_action('nets_after_payment', $transaction);

            //Update the order status
            $order->update_status('on-hold', '');

            //Error Note
            $message = 'Thank you for shopping with us.<br />Your payment transaction was successful, but the amount paid is not the same as the total order amount.<br />Your order is currently on-hold.<br />Kindly contact us for more information regarding your order and payment status.';

            //Add Customer Order Note
            $order->add_order_note($message . '<br />Voguepay Transaction ID: ' . $transaction_id, 1);

            //Add Admin Order Note
            $order->add_order_note('This order is currently on hold.<br />Reason: Amount paid is less than the total order amount.<br />Amount Paid was: &#8358; ' . $amount . ' while the total order amount is: &#8358; ' . $posted_amount . '<br />Voguepay Transaction ID: ' . $transaction_id);

            // Reduce stock levels
            $order->reduce_order_stock();

            // Empty cart
            $woocommerce->cart->empty_cart();

            if (function_exists('wc_add_notice')) {
              wc_add_notice($message, 'error');
            }
            else { // WC < 2.1
              $woocommerce->add_error($message);
              $woocommerce->set_messages();
            }
          }
          else {
            //after payment hook
            do_action('nets_after_payment', $transaction);

            if ($order->status == 'processing') {
              $order->add_order_note('Payment Via Voguepay<br />Transaction ID: ' . $transaction_id);

              //Add customer order note
              $order->add_order_note('Payment Received.<br />Your order is currently being processed.<br />We will be shipping your order to you soon.<br />Voguepay Transaction ID: ' . $transaction_id, 1);

              // Reduce stock levels
              $order->reduce_order_stock();

              // Empty cart
              $woocommerce->cart->empty_cart();

              $message = 'Thank you for shopping with us.<br />Your transaction was successful, payment was received.<br />Your order is currently being processed.';

              if (function_exists('wc_add_notice')) {
                wc_add_notice($message, 'success');
              }
              else { // WC < 2.1
                $woocommerce->add_message($message);
                $woocommerce->set_messages();
              }
            }
            else {
              $order->update_status('processing', 'Payment received, your order is currently being processed.');

              $order->add_order_note('Payment Via Voguepay Payment Gateway<br />Transaction ID: ' . $transaction_id);

              //Add customer order note
              $order->add_order_note('Payment Received.<br />Your order is currently being processed.<br />We will be shipping your order to you soon.<br />Voguepay Transaction ID: ' . $transaction_id, 1);

              // Reduce stock levels
              $order->reduce_order_stock();

              // Empty cart
              $woocommerce->cart->empty_cart();

              $message = 'Thank you for shopping with us.<br />Your transaction was successful, payment was received.<br />Your order is currently being processed.';

              if (function_exists('wc_add_notice')) {
                wc_add_notice($message, 'success');
              }
              else { // WC < 2.1
                $woocommerce->add_message($message);
                $woocommerce->set_messages();
              }
            }
          }
        }
        else {
          $message = 'Thank you for shopping with us. <br />However, the transaction wasn\'t successful, payment wasn\'t recieved.';
          $transaction_id = $transaction['transaction_id'];

          //Add Customer Order Note
          $order->add_order_note($message . '<br />Voguepay Transaction ID: ' . $transaction_id, 1);

          //Add Admin Order Note
          $order->add_order_note($message . '<br />Voguepay Transaction ID: ' . $transaction_id);

          if (function_exists('wc_add_notice')) {
            wc_add_notice($message, 'error');
          }
          else { // WC < 2.1
            $woocommerce->add_error($message);
            $woocommerce->set_messages();
          }
        }
      }
      else {
        $message = 'Thank you for shopping with us. <br />However, the transaction wasn\'t successful, payment wasn\'t recieved.';

        if (function_exists('wc_add_notice')) {
          wc_add_notice($message, 'error');
        }
        else { // WC < 2.1
          $woocommerce->add_error($message);
          $woocommerce->set_messages();
        }
      }

      $redirect_url = get_permalink(woocommerce_get_page_id('myaccount'));
      wp_redirect($redirect_url);
      exit;
    }

  }

  /**
   * Add Voguepay Gateway to WC
   * */
  function woocommerce_add_nets_gateway($methods) {
    $methods[] = 'WC_Nets_Gateway';
    return $methods;
  }

  add_filter('woocommerce_payment_gateways', 'woocommerce_add_nets_gateway');


  /**
   * only add the naira currency and symbol if WC versions is less than 2.1
   */
  if (version_compare(WOOCOMMERCE_VERSION, "2.1") <= 0) {

    /**
     * Add NGN as a currency in WC
     * */
    add_filter('woocommerce_currencies', 'nets_add_my_currency');

    if (!function_exists('nets_add_my_currency')) {

      function nets_add_my_currency($currencies) {
        $currencies['NGN'] = __('Naira', 'woocommerce');
        return $currencies;
      }

    }

    /**
     * Enable the naira currency symbol in WC
     * */
    add_filter('woocommerce_currency_symbol', 'nets_add_my_currency_symbol', 10, 2);

    if (!function_exists('nets_add_my_currency_symbol')) {

      function nets_add_my_currency_symbol($currency_symbol, $currency) {
        switch ($currency) {
          case 'NGN': $currency_symbol = '&#8358; ';
            break;
        }
        return $currency_symbol;
      }

    }
  }


  /**
   * Add a settings link to the plugin entry in the plugins menu
   * */
  add_filter('plugin_action_links', 'nets_plugin_action_links', 10, 2);

  function nets_plugin_action_links($links, $file) {
    static $this_plugin;

    if (!$this_plugin) {
      $this_plugin = plugin_basename(__FILE__);
    }

    if ($file == $this_plugin) {
      $settings_link = '<a href="' . get_bloginfo('wpurl') . '/wp-admin/admin.php?page=woocommerce_settings&tab=payment_gateways&section=WC_Nets_Gateway">Settings</a>';
      array_unshift($links, $settings_link);
    }
    return $links;
  }

}

